{"version":3,"sources":["../../src/utils/proto-chain.util.ts","../../src/tracking/mixins-map.tracking.ts","../../src/tracking/get-mixins-for-class.tracking.ts","../../src/utils/find-all-constituent-classes.util.ts","../../src/utils/decorators-map.util.ts","../../src/utils/unique.util.ts","../../src/utils/merge-objects-of-decorators.util.ts","../../src/utils/merge-property-and-method-decorators.util.ts","../../src/utils/merge-decorators.util.ts","../../src/utils/deep-decorator-search.util.ts"],"names":["decorators"],"mappings":"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","file":"deep-decorator-search.util.mjs","sourcesContent":["/**\n * Returns the full chain of prototypes up until Object.prototype given a starting object.\n *\n * The order of prototypes will be closest to farthest in the chain.\n * This function is used internally by various functions to traverse the prototype chain.\n *\n * @param obj - The object to get the prototype chain for\n * @param currentChain - The current chain (used for recursion)\n * @returns An array of objects representing the prototype chain\n *\n * @internal\n */\nexport const protoChain = (obj: object, currentChain: object[] = [obj]): object[] => {\n  // Get the prototype of the object\n  const proto = Object.getPrototypeOf(obj)\n\n  // If we've reached the end of the chain, return the current chain\n  if (proto === null) return currentChain\n\n  // Recursively get the rest of the chain\n  return protoChain(proto, [...currentChain, proto])\n}\n","/**\n * Keeps track of constituent classes for every mixin class created by ts-mixer.\n * Uses a WeakMap to avoid memory leaks.\n *\n * @internal\n */\nexport const mixins = new WeakMap<any, Function[]>()\n","import type { Class } from '../types/class.type'\nimport { mixins } from './mixins-map.tracking'\n\n/**\n * Gets the constituent classes for a mixin class.\n *\n * @param clazz - The mixin class to get constituents for\n * @returns An array of constituent classes, or undefined if not a mixin\n *\n * @example\n * const AB = Mixin(A, B);\n * const mixins = getMixinsForClass(AB); // [A, B]\n */\nexport const getMixinsForClass = (clazz: Class): Function[] | undefined => mixins.get(clazz)\n","import type { Class } from '../types/class.type'\nimport { protoChain } from '../utils/proto-chain.util'\nimport { getMixinsForClass } from '../tracking/get-mixins-for-class.tracking'\n\n/**\n * Finds all constituent classes for a set of classes, including those in the prototype chain and mixins.\n *\n * This function is used internally by the deepDecoratorSearch function to find all classes\n * that might have decorators to inherit.\n *\n * @param classes - Classes to find constituents for\n * @returns Array of all constituent classes\n *\n * @internal\n */\nexport const findAllConstituentClasses = (...classes: Class[]): Class[] => {\n  // Use sets to avoid duplicates\n  const allClasses = new Set<Class>()\n  const frontier = new Set<Class>([...classes])\n\n  // Breadth-first search to find all constituent classes\n  while (frontier.size > 0) {\n    for (const clazz of frontier) {\n      // Get classes from the prototype chain\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor)\n\n      // Get classes from mixins\n      const mixinClasses = getMixinsForClass(clazz) ?? []\n\n      // Combine all potential new classes\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses] as Class[]\n\n      // Filter out classes we've already seen\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c))\n\n      // Add new classes to the frontier\n      for (const newClass of newClasses) frontier.add(newClass)\n\n      // Add the current class to the set of all classes\n      allClasses.add(clazz)\n\n      // Remove the current class from the frontier\n      frontier.delete(clazz)\n    }\n  }\n\n  return [...allClasses]\n}\n","import type { Class } from '../types/class.type'\nimport type { Decorators } from '../interfaces/decorators.interface'\n\n/**\n * Map to store decorators for classes.\n *\n * This map is used internally by the Decorate function to track decorators for inheritance in mixed classes.\n *\n * @internal\n */\nexport const decorators: Map<Class, Decorators> = new Map()\n","/**\n * Returns a new array with duplicate elements removed.\n *\n * This function is used internally by various functions to ensure uniqueness of elements.\n *\n * @template T - Type of array elements\n * @param arr - The array to remove duplicates from\n * @returns A new array with duplicates removed\n *\n * @internal\n */\nexport const unique = <T>(arr: T[]): T[] => arr.filter((e, i) => arr.indexOf(e) === i)\n","import { unique } from \"../utils/unique.util\"\nimport type { ObjectOfDecorators } from \"../interfaces/object-of-decorators.interface\"\n\n/**\n * Merges two objects of decorators into one.\n *\n * This function is used internally by the mergePropertyAndMethodDecorators function to merge\n * property or method decorators from multiple classes.\n *\n * @template T - Type of decorator (PropertyDecorator or MethodDecorator)\n * @param o1 - First object of decorators\n * @param o2 - Second object of decorators\n * @returns Merged object of decorators\n *\n * @internal\n */\nexport const mergeObjectsOfDecorators = <T extends PropertyDecorator | MethodDecorator>(\n  o1: ObjectOfDecorators<T>,\n  o2: ObjectOfDecorators<T>,\n): ObjectOfDecorators<T> => {\n  // Get all keys from both objects\n  const allKeys = unique([...Object.getOwnPropertyNames(o1 || {}), ...Object.getOwnPropertyNames(o2 || {})])\n\n  // Create a new object with merged decorators for each key\n  const mergedObject: ObjectOfDecorators<T> = {}\n  for (const key of allKeys) {\n    // Create new arrays to avoid modifying the original arrays\n    const decorators1 = o1 && o1[key] ? [...o1[key]] : []\n    const decorators2 = o2 && o2[key] ? [...o2[key]] : []\n\n    // Concatenate the arrays instead of using unique to preserve all decorators\n    mergedObject[key] = [...decorators1, ...decorators2]\n  }\n\n  return mergedObject\n}\n","import type { PropertyAndMethodDecorators } from '../interfaces/property-and-method-decorators.interface'\nimport { mergeObjectsOfDecorators } from './merge-objects-of-decorators.util'\n\n/**\n * Merges two property and method decorator objects into one.\n *\n * This function is used internally by the mergeDecorators function to merge property and method decorators\n * from multiple classes.\n *\n * @param d1 - First property and method decorators\n * @param d2 - Second property and method decorators\n * @returns Merged property and method decorators\n *\n * @internal\n */\nexport const mergePropertyAndMethodDecorators = (\n  d1: PropertyAndMethodDecorators,\n  d2: PropertyAndMethodDecorators,\n): PropertyAndMethodDecorators => ({\n  // Merge property decorators\n  property: mergeObjectsOfDecorators(d1?.property ?? {}, d2?.property ?? {}),\n\n  // Merge method decorators\n  method: mergeObjectsOfDecorators(d1?.method ?? {}, d2?.method ?? {}),\n})\n","import type { Decorators } from '../interfaces/decorators.interface'\nimport { unique } from '../utils/unique.util'\nimport { mergePropertyAndMethodDecorators } from './merge-property-and-method-decorators.util'\n\n/**\n * Merges two decorator objects into one.\n *\n * This function is used internally by the decorator search functions to merge decorators from multiple classes.\n *\n * @param d1 - First decorators\n * @param d2 - Second decorators\n * @returns Merged decorators\n *\n * @internal\n */\nexport const mergeDecorators = (d1: Decorators, d2: Decorators): Decorators => ({\n  // Merge class decorators (removing duplicates)\n  class: unique([...(d1?.class ?? []), ...(d2?.class ?? [])]),\n\n  // Merge static property and method decorators\n  static: mergePropertyAndMethodDecorators(d1?.static ?? {}, d2?.static ?? {}),\n\n  // Merge instance property and method decorators\n  instance: mergePropertyAndMethodDecorators(d1?.instance ?? {}, d2?.instance ?? {}),\n})\n","import type { Class } from '../types/class.type'\nimport type { Decorators } from '../interfaces/decorators.interface'\nimport { findAllConstituentClasses } from './find-all-constituent-classes.util'\nimport { decorators } from './decorators-map.util'\nimport { mergeDecorators } from './merge-decorators.util'\n\n/**\n * Searches for decorators in all constituent classes, including those in the prototype chain and mixins.\n *\n * This function is used internally by the Mixin function to find all decorators to inherit\n * when the decoratorInheritance setting is set to 'deep'.\n *\n * @param classes - Classes to search for decorators\n * @returns Merged decorators from all constituent classes\n *\n * @internal\n */\nexport const deepDecoratorSearch = (...classes: Class[]): Decorators => {\n  // Find all constituent classes and get their decorators\n  const decoratorsForClassChain = findAllConstituentClasses(...classes)\n    .map((clazz) => decorators.get(clazz as Class))\n    .filter((decorators) => !!decorators) as Decorators[]\n\n  // If no decorators found, return empty object\n  if (decoratorsForClassChain.length == 0) return {}\n\n  // If only one decorator found, return it\n  if (decoratorsForClassChain.length == 1) return decoratorsForClassChain[0]\n\n  // Merge all decorators\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2))\n}\n"]}