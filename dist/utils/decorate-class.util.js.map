{"version":3,"sources":["../../src/utils/decorators-map.util.ts","../../src/utils/get-decorators-for-class.util.ts","../../src/utils/decorate-class.util.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAUO,IAAM,UAAA,uBAAyC,GAAI,EAAA;;;ACGnD,IAAM,qBAAA,GAAwB,CAAC,KAAiB,KAAA;AAErD,EAAI,IAAA,kBAAA,GAAqB,UAAW,CAAA,GAAA,CAAI,KAAK,CAAA;AAG7C,EAAA,IAAI,CAAC,kBAAoB,EAAA;AACvB,IAAA,kBAAA,GAAqB,EAAC;AACtB,IAAW,UAAA,CAAA,GAAA,CAAI,OAAO,kBAAkB,CAAA;AAAA;AAG1C,EAAO,OAAA,kBAAA;AACT,CAAA;;;ACTO,IAAM,aAAgB,GAAA,CAA2B,SACrD,KAAA,CAAC,KAAiB,KAAA;AAEjB,EAAM,MAAA,kBAAA,GAAqB,sBAAsB,KAAK,CAAA;AAGtD,EAAA,IAAI,kBAAkB,kBAAmB,CAAA,KAAA;AACzC,EAAA,IAAI,CAAC,eAAiB,EAAA;AACpB,IAAA,eAAA,GAAkB,EAAC;AACnB,IAAA,kBAAA,CAAmB,KAAQ,GAAA,eAAA;AAAA;AAI7B,EAAA,eAAA,CAAgB,KAAK,SAAS,CAAA;AAG9B,EAAA,OAAO,UAAU,KAAK,CAAA;AACxB","file":"decorate-class.util.js","sourcesContent":["import type { Class } from '../types/class.type'\nimport type { Decorators } from '../interfaces/decorators.interface'\n\n/**\n * Map to store decorators for classes.\n *\n * This map is used internally by the Decorate function to track decorators for inheritance in mixed classes.\n *\n * @internal\n */\nexport const decorators: Map<Class, Decorators> = new Map()\n","import type { Class } from '../types/class.type'\nimport { decorators } from './decorators-map.util'\n\n/**\n * Gets or creates a decorator object for a class.\n *\n * This function is used internally by the Decorate function to track decorators for inheritance in mixed classes.\n *\n * @param clazz - Class to get decorators for\n * @returns Decorator object for the class\n *\n * @internal\n */\nexport const getDecoratorsForClass = (clazz: Class) => {\n  // Get existing decorators for the class\n  let decoratorsForClass = decorators.get(clazz)\n\n  // If no decorators exist, create a new object\n  if (!decoratorsForClass) {\n    decoratorsForClass = {}\n    decorators.set(clazz, decoratorsForClass)\n  }\n\n  return decoratorsForClass\n}\n","import type { Class } from '../types/class.type'\nimport { getDecoratorsForClass } from './get-decorators-for-class.util'\n\n/**\n * Decorates a class with a class decorator.\n *\n * This function is used internally by the Decorate function to track class decorators\n * for inheritance in mixed classes.\n *\n * @template T - Type of class decorator\n * @param decorator - Class decorator to apply\n * @returns Decorated class decorator\n *\n * @internal\n */\nexport const decorateClass = <T extends ClassDecorator>(decorator: T): T =>\n  ((clazz: Class) => {\n    // Get or create decorators for the class\n    const decoratorsForClass = getDecoratorsForClass(clazz)\n\n    // Get or create class decorators array\n    let classDecorators = decoratorsForClass.class\n    if (!classDecorators) {\n      classDecorators = []\n      decoratorsForClass.class = classDecorators\n    }\n\n    // Add the decorator to the class decorators array\n    classDecorators.push(decorator)\n\n    // Apply the decorator to the class\n    return decorator(clazz)\n  }) as T\n"]}