{"version":3,"sources":["../../src/utils/unique.util.ts","../../src/utils/merge-objects-of-decorators.util.ts"],"names":[],"mappings":";;;AAWO,IAAM,MAAS,GAAA,CAAI,GAAkB,KAAA,GAAA,CAAI,MAAO,CAAA,CAAC,CAAG,EAAA,CAAA,KAAM,GAAI,CAAA,OAAA,CAAQ,CAAC,CAAA,KAAM,CAAC,CAAA;;;ACKxE,IAAA,wBAAA,GAA2B,CACtC,EAAA,EACA,EAC0B,KAAA;AAE1B,EAAA,MAAM,UAAU,MAAO,CAAA,CAAC,GAAG,MAAA,CAAO,oBAAoB,EAAM,IAAA,EAAE,CAAA,EAAG,GAAG,MAAO,CAAA,mBAAA,CAAoB,MAAM,EAAE,CAAC,CAAC,CAAA;AAGzG,EAAA,MAAM,eAAsC,EAAC;AAC7C,EAAA,KAAA,MAAW,OAAO,OAAS,EAAA;AAEzB,IAAM,MAAA,WAAA,GAAc,EAAM,IAAA,EAAA,CAAG,GAAG,CAAA,GAAI,CAAC,GAAG,EAAG,CAAA,GAAG,CAAC,CAAA,GAAI,EAAC;AACpD,IAAM,MAAA,WAAA,GAAc,EAAM,IAAA,EAAA,CAAG,GAAG,CAAA,GAAI,CAAC,GAAG,EAAG,CAAA,GAAG,CAAC,CAAA,GAAI,EAAC;AAGpD,IAAA,YAAA,CAAa,GAAG,CAAI,GAAA,CAAC,GAAG,WAAA,EAAa,GAAG,WAAW,CAAA;AAAA;AAGrD,EAAO,OAAA,YAAA;AACT","file":"merge-objects-of-decorators.util.js","sourcesContent":["/**\n * Returns a new array with duplicate elements removed.\n *\n * This function is used internally by various functions to ensure uniqueness of elements.\n *\n * @template T - Type of array elements\n * @param arr - The array to remove duplicates from\n * @returns A new array with duplicates removed\n *\n * @internal\n */\nexport const unique = <T>(arr: T[]): T[] => arr.filter((e, i) => arr.indexOf(e) === i)\n","import { unique } from \"../utils/unique.util\"\nimport type { ObjectOfDecorators } from \"../interfaces/object-of-decorators.interface\"\n\n/**\n * Merges two objects of decorators into one.\n *\n * This function is used internally by the mergePropertyAndMethodDecorators function to merge\n * property or method decorators from multiple classes.\n *\n * @template T - Type of decorator (PropertyDecorator or MethodDecorator)\n * @param o1 - First object of decorators\n * @param o2 - Second object of decorators\n * @returns Merged object of decorators\n *\n * @internal\n */\nexport const mergeObjectsOfDecorators = <T extends PropertyDecorator | MethodDecorator>(\n  o1: ObjectOfDecorators<T>,\n  o2: ObjectOfDecorators<T>,\n): ObjectOfDecorators<T> => {\n  // Get all keys from both objects\n  const allKeys = unique([...Object.getOwnPropertyNames(o1 || {}), ...Object.getOwnPropertyNames(o2 || {})])\n\n  // Create a new object with merged decorators for each key\n  const mergedObject: ObjectOfDecorators<T> = {}\n  for (const key of allKeys) {\n    // Create new arrays to avoid modifying the original arrays\n    const decorators1 = o1 && o1[key] ? [...o1[key]] : []\n    const decorators2 = o2 && o2[key] ? [...o2[key]] : []\n\n    // Concatenate the arrays instead of using unique to preserve all decorators\n    mergedObject[key] = [...decorators1, ...decorators2]\n  }\n\n  return mergedObject\n}\n"]}