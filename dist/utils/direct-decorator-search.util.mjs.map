{"version":3,"sources":["../../src/utils/decorators-map.util.ts","../../src/utils/get-decorators-for-class.util.ts","../../src/utils/unique.util.ts","../../src/utils/merge-objects-of-decorators.util.ts","../../src/utils/merge-property-and-method-decorators.util.ts","../../src/utils/merge-decorators.util.ts","../../src/utils/direct-decorator-search.util.ts"],"names":[],"mappings":"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","file":"direct-decorator-search.util.mjs","sourcesContent":["import type { Class } from '../types/class.type'\nimport type { Decorators } from '../interfaces/decorators.interface'\n\n/**\n * Map to store decorators for classes.\n *\n * This map is used internally by the Decorate function to track decorators for inheritance in mixed classes.\n *\n * @internal\n */\nexport const decorators: Map<Class, Decorators> = new Map()\n","import type { Class } from '../types/class.type'\nimport { decorators } from './decorators-map.util'\n\n/**\n * Gets or creates a decorator object for a class.\n *\n * This function is used internally by the Decorate function to track decorators for inheritance in mixed classes.\n *\n * @param clazz - Class to get decorators for\n * @returns Decorator object for the class\n *\n * @internal\n */\nexport const getDecoratorsForClass = (clazz: Class) => {\n  // Get existing decorators for the class\n  let decoratorsForClass = decorators.get(clazz)\n\n  // If no decorators exist, create a new object\n  if (!decoratorsForClass) {\n    decoratorsForClass = {}\n    decorators.set(clazz, decoratorsForClass)\n  }\n\n  return decoratorsForClass\n}\n","/**\n * Returns a new array with duplicate elements removed.\n *\n * This function is used internally by various functions to ensure uniqueness of elements.\n *\n * @template T - Type of array elements\n * @param arr - The array to remove duplicates from\n * @returns A new array with duplicates removed\n *\n * @internal\n */\nexport const unique = <T>(arr: T[]): T[] => arr.filter((e, i) => arr.indexOf(e) === i)\n","import { unique } from \"../utils/unique.util\"\nimport type { ObjectOfDecorators } from \"../interfaces/object-of-decorators.interface\"\n\n/**\n * Merges two objects of decorators into one.\n *\n * This function is used internally by the mergePropertyAndMethodDecorators function to merge\n * property or method decorators from multiple classes.\n *\n * @template T - Type of decorator (PropertyDecorator or MethodDecorator)\n * @param o1 - First object of decorators\n * @param o2 - Second object of decorators\n * @returns Merged object of decorators\n *\n * @internal\n */\nexport const mergeObjectsOfDecorators = <T extends PropertyDecorator | MethodDecorator>(\n  o1: ObjectOfDecorators<T>,\n  o2: ObjectOfDecorators<T>,\n): ObjectOfDecorators<T> => {\n  // Get all keys from both objects\n  const allKeys = unique([...Object.getOwnPropertyNames(o1 || {}), ...Object.getOwnPropertyNames(o2 || {})])\n\n  // Create a new object with merged decorators for each key\n  const mergedObject: ObjectOfDecorators<T> = {}\n  for (const key of allKeys) {\n    // Create new arrays to avoid modifying the original arrays\n    const decorators1 = o1 && o1[key] ? [...o1[key]] : []\n    const decorators2 = o2 && o2[key] ? [...o2[key]] : []\n\n    // Concatenate the arrays instead of using unique to preserve all decorators\n    mergedObject[key] = [...decorators1, ...decorators2]\n  }\n\n  return mergedObject\n}\n","import type { PropertyAndMethodDecorators } from '../interfaces/property-and-method-decorators.interface'\nimport { mergeObjectsOfDecorators } from './merge-objects-of-decorators.util'\n\n/**\n * Merges two property and method decorator objects into one.\n *\n * This function is used internally by the mergeDecorators function to merge property and method decorators\n * from multiple classes.\n *\n * @param d1 - First property and method decorators\n * @param d2 - Second property and method decorators\n * @returns Merged property and method decorators\n *\n * @internal\n */\nexport const mergePropertyAndMethodDecorators = (\n  d1: PropertyAndMethodDecorators,\n  d2: PropertyAndMethodDecorators,\n): PropertyAndMethodDecorators => ({\n  // Merge property decorators\n  property: mergeObjectsOfDecorators(d1?.property ?? {}, d2?.property ?? {}),\n\n  // Merge method decorators\n  method: mergeObjectsOfDecorators(d1?.method ?? {}, d2?.method ?? {}),\n})\n","import type { Decorators } from '../interfaces/decorators.interface'\nimport { unique } from '../utils/unique.util'\nimport { mergePropertyAndMethodDecorators } from './merge-property-and-method-decorators.util'\n\n/**\n * Merges two decorator objects into one.\n *\n * This function is used internally by the decorator search functions to merge decorators from multiple classes.\n *\n * @param d1 - First decorators\n * @param d2 - Second decorators\n * @returns Merged decorators\n *\n * @internal\n */\nexport const mergeDecorators = (d1: Decorators, d2: Decorators): Decorators => ({\n  // Merge class decorators (removing duplicates)\n  class: unique([...(d1?.class ?? []), ...(d2?.class ?? [])]),\n\n  // Merge static property and method decorators\n  static: mergePropertyAndMethodDecorators(d1?.static ?? {}, d2?.static ?? {}),\n\n  // Merge instance property and method decorators\n  instance: mergePropertyAndMethodDecorators(d1?.instance ?? {}, d2?.instance ?? {}),\n})\n","import type { Class } from '../types/class.type'\nimport type { Decorators } from '../interfaces/decorators.interface'\nimport { getDecoratorsForClass } from './get-decorators-for-class.util'\nimport { mergeDecorators } from './merge-decorators.util'\n\n/**\n * Searches for decorators in direct constituent classes only.\n *\n * This function is used internally by the Mixin function to find decorators to inherit\n * when the decoratorInheritance setting is set to 'direct'.\n *\n * @param classes - Classes to search for decorators\n * @returns Merged decorators from direct constituent classes\n *\n * @internal\n */\nexport const directDecoratorSearch = (...classes: Class[]): Decorators => {\n  // Get decorators for each class\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz))\n\n  // If no decorators found, return empty object\n  if (classDecorators.length === 0) return {}\n\n  // If only one decorator found, return it\n  if (classDecorators.length === 1) return classDecorators[0]\n\n  // Merge all decorators\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2))\n}\n"]}