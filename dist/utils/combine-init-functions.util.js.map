{"version":3,"sources":["../../src/utils/combine-init-functions.util.ts"],"names":[],"mappings":";;;AAYO,SAAS,oBAAA,CAAqB,YAAmB,gBAAkC,EAAA;AAExF,EAAA,MAAM,aAA4B,GAAA,UAAA,CAC/B,GAAI,CAAA,CAAC,UAAU,KAAM,CAAA,gBAAgB,CAAC,CAAA,CACtC,MAAO,CAAA,CAAC,IAAS,KAAA,OAAO,SAAS,UAAU,CAAA;AAG9C,EAAM,MAAA,oBAAA,GAAuB,YAAwB,IAAmB,EAAA;AACtE,IAAA,KAAA,MAAW,YAAgB,IAAA,aAAA,EAA4B,YAAA,CAAA,KAAA,CAAM,MAAM,IAAI,CAAA;AAAA,GACzE;AAGA,EAAA,OAAO,EAAE,CAAC,gBAAgB,GAAG,oBAAqB,EAAA;AACpD","file":"combine-init-functions.util.js","sourcesContent":["/**\n * Combines initialization functions from multiple prototypes into a single function.\n *\n * This function is used internally by the Mixin function to combine initialization functions\n * from all constituent classes into a single function that calls all of them.\n *\n * @param prototypes - The prototypes containing init functions\n * @param initFunctionName - The name of the initialization function\n * @returns An object with the combined init function\n *\n * @internal\n */\nexport function combineInitFunctions(prototypes: any[], initFunctionName: string): object {\n  // Extract all initialization functions from the prototypes\n  const initFunctions: Function[] = prototypes\n    .map((proto) => proto[initFunctionName])\n    .filter((func) => typeof func === 'function')\n\n  // Create a combined initialization function that calls all individual init functions\n  const combinedInitFunction = function (this: any, ...args: any[]): void {\n    for (const initFunction of initFunctions) initFunction.apply(this, args)\n  }\n\n  // Return an object with the combined init function\n  return { [initFunctionName]: combinedInitFunction }\n}\n"]}