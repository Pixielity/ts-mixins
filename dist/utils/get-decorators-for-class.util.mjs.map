{"version":3,"sources":["../../src/utils/decorators-map.util.ts","../../src/utils/get-decorators-for-class.util.ts"],"names":[],"mappings":";;;;;;;;;;;AAUO,IAAM,UAAA,uBAAyC,GAAI,EAAA;;;ACG7C,IAAA,qBAAA,GAAwB,CAAC,KAAiB,KAAA;AAErD,EAAI,IAAA,kBAAA,GAAqB,UAAW,CAAA,GAAA,CAAI,KAAK,CAAA;AAG7C,EAAA,IAAI,CAAC,kBAAoB,EAAA;AACvB,IAAA,kBAAA,GAAqB,EAAC;AACtB,IAAW,UAAA,CAAA,GAAA,CAAI,OAAO,kBAAkB,CAAA;AAAA;AAG1C,EAAO,OAAA,kBAAA;AACT","file":"get-decorators-for-class.util.mjs","sourcesContent":["import type { Class } from '../types/class.type'\nimport type { Decorators } from '../interfaces/decorators.interface'\n\n/**\n * Map to store decorators for classes.\n *\n * This map is used internally by the Decorate function to track decorators for inheritance in mixed classes.\n *\n * @internal\n */\nexport const decorators: Map<Class, Decorators> = new Map()\n","import type { Class } from '../types/class.type'\nimport { decorators } from './decorators-map.util'\n\n/**\n * Gets or creates a decorator object for a class.\n *\n * This function is used internally by the Decorate function to track decorators for inheritance in mixed classes.\n *\n * @param clazz - Class to get decorators for\n * @returns Decorator object for the class\n *\n * @internal\n */\nexport const getDecoratorsForClass = (clazz: Class) => {\n  // Get existing decorators for the class\n  let decoratorsForClass = decorators.get(clazz)\n\n  // If no decorators exist, create a new object\n  if (!decoratorsForClass) {\n    decoratorsForClass = {}\n    decorators.set(clazz, decoratorsForClass)\n  }\n\n  return decoratorsForClass\n}\n"]}